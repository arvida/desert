= Desert

Desert is a component framework for Rails that allows you to seamlessly define in your plugins:

* Models
* Controllers
* Views
* Helpers
* Routes
* Migrations
* Plugin Dependencies

Classes are automatically mixed in with your own or other plugins' classes.

This allows you to make full featured composable components.

Desert is a replacement for Appable Plugins (http://wiki.pluginaweek.org/Appable_plugins).

== Installation

  sudo gem install desert
  
== Using desert

To use Desert, you need to do only a few things:

1. Require 'desert' between 'boot' and Rails::Initializer.run in environment.rb

  # File: config/environment.rb

  require File.join(File.dirname(__FILE__), 'boot')

  require 'desert'

  Rails::Initializer.run do |config|
  end

2. Generate your desert plugin

  script/generate desert_plugin my_plugin_app

which will create the following directory structure in vendor/plugins/my_app:

  |-- app
  |   |-- controllers
  |   |-- helpers
  |   |-- models
  |   `-- views
  |-- config
  |   `-- routes.rb
  |-- db
  |   `-- migrate
  |-- init.rb
  |-- lib
  `-- spec
      |-- controllers
      |-- fixtures
      |-- models
      |-- spec_helper.rb
      `-- views

== Adding Routes

If you look in your RAILS_ROOT/config/routes.rb file you will notice that the generator added a new line to the top:

  map.routes_from_plugin(:my_plugin_app)

This line connects your routes to the app.  The only difference between your plugin's 
routes file and the standard config/routes.rb file is that you don't need to write "map" - it's implicit.

So what would be

  map.resources :posts
  
in config/routes.rb becomes just

  resources :posts
  
in my_app/config/routes.rb.  All standard routing methods are available, such as:

  namespace :admin do |admin|
    admin.resources :posts
  end

== Running migrations

Desert uses a separate table to manage migration version to maintain backwards compatibility with Rails 1.x.
Your plugin app's migration live in your_plugin/db/migrate.  To run migrations, follow these steps:

* Create a new migration in your main app

    script/generate migration migrate_my_plugin_to_045
  
* Add the custom `migrate_plugin` method

    class MigrateMyPluginTo045 < ActiveRecord::Migration
      def self.up
        migrate_plugin(:my_plugin, 20080530223548)
      end

      def self.down
        migrate_plugin(:my_plugin, 0)
      end
    end

* Run your migrations normally

    rake db:migrate

== Example

Say you want to create a plugin named acts_as_spiffy.

Desert allows Spiffy to have a set of features that can be reused and extended in several projects.

The Spiffy project has a:

* SpiffyController
* Spiffy model
* SpiffyHelper
* spiffy.html.erb
* SpiffyLib library class

The Spiffy plugin acts as its own mini Rails application.  Here is the directory structure:

  RAILS_ROOT/vendor/plugins/spiffy/app/controllers/spiffy_controller.rb
  RAILS_ROOT/vendor/plugins/spiffy/app/models/spiffy.rb
  RAILS_ROOT/vendor/plugins/spiffy/app/helpers/spiffy_helper.rb
  RAILS_ROOT/vendor/plugins/spiffy/app/views/spiffy/spiffy.rhtml
  RAILS_ROOT/vendor/plugins/spiffy/lib/spiffy_lib.rb

Now, say there is a Spiffy Store rails application that uses acts_as_spiffy.  The Rails app can open up any of the Spiffy classes and override any of the methods.

Say spiffy.rb in the Spiffy plugin is defined as:

  class Spiffy < ActiveRecord::Base
    def why?
      "I just am Spiffy"
    end
  end

The Spiffy#why method can be overridden in RAILS_ROOT/app/models/spiffy.rb

  class Spiffy < ActiveRecord::Base
    def why?
      "I sell Spiffy stuff"
    end
  end

== Running plugin tests

You can run your plugin tests/specs like so:

  rake desert:testspec:plugins PLUGIN=spiffy

Leaving off the PLUGIN environment variable will cause it to run all the 
test/specs for all installed plugins, which may not be what you want.

== Running Desert Specs

To run specs, you need to:

* Make sure you have the necessary gems installed (rr, rspec)
* Install git http://git.or.cz/
* Create a database named desert_test
* Update the database.yml file in `spec/rails_root/config/database.yml`
* Install the dependencies
* Run the specs
  
Desert is a library that heavily monkey patches Rails. To ensure that Desert works with
multiple versions of Rails, its tests are run against the supported versions of Rails.

To set up the different supported versions of Rails, run 

  rake install_dependencies

This will clone the Rails git repo and export the supported versions of rails into the
respective directories.

  rake update_dependencies 

will update the clones repo on your machine.
